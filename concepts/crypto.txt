To encrypt a block you need a key and a nonce for that block. Every nonce/key pair has to be unique. Each piece being a block is convenient for this. If <code>depth</code> is the level down on the hash tree, and <code>breadth</code> is the amount of hashes previous to the current one but <i>only on that level</i> then making a CTR method where the counter is 0x100*breadth+depth produces unique nonces. Determining depth and breadth is trivial during insertion (breadth = a counter that doesn't reset when any given hash level is cleared for the next piece). Determining depth during extraction is trivial, and breadth = parentBreadth * hashesPerPiece + index of parent hash in parent piece. Since you can figure the same number during insertion and extraction and it's unique, no need to store nonces for every piece inside the piece.

Once you have a key and a base nonce (just random, the ctr is XOR'd w/ it), you can encrypt a tree, getting a root hash/depth URI. Encrypting the URI with the key, you can then encrypt the key plus some zero bytes for verification. (checksum already in nacl, but eh). Call the key+zero bytes a slot. Encrypt that slot to each public key for people to decrypt the encrypted tree. Appending the base nonce, encrypted root URI, and the slots afterward, plus some random data, you can make a file that it isn't obvious who it's for or how many people it's for, but only they can get the key and root needed to acquire and decrypt the encrypted tree. This file is a "wrapper" file that represents the encrypted tree, even though the tree itself has a root piece, an extra level up so you can actually disseminate the key over Forum and not over IRC or (shudder) email.
